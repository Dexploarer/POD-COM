name: Performance Monitoring

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 4 * * 1,4' # Twice weekly: Monday and Thursday at 4 AM UTC

permissions:
  contents: read
  checks: write
  pull-requests: write

env:
  SOLANA_VERSION: "2.2.17"
  ANCHOR_VERSION: "0.31.1"

jobs:
  build-performance:
    name: "⏱️ Build Performance"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Solana
        uses: ./actions/setup-solana
        with:
          solana-version: ${{ env.SOLANA_VERSION }}
          anchor-version: ${{ env.ANCHOR_VERSION }}

      - name: Install dependencies
        run: |
          bun install
          cd sdk && bun install
          cd ../cli && bun install

      - name: Measure dependency installation time
        run: |
          echo "⏱️ Measuring dependency installation performance..."
          start_time=$(date +%s%N)
          bun install --force
          end_time=$(date +%s%N)
          duration=$(( (end_time - start_time) / 1000000 ))
          echo "📊 Root dependency installation: ${duration}ms"
          echo "DEPS_INSTALL_TIME=${duration}" >> $GITHUB_ENV

      - name: Measure Anchor build time
        run: |
          echo "⏱️ Measuring Anchor build performance..."
          start_time=$(date +%s%N)
          bun run build:safe
          end_time=$(date +%s%N)
          duration=$(( (end_time - start_time) / 1000000 ))
          echo "📊 Anchor build time: ${duration}ms"
          echo "ANCHOR_BUILD_TIME=${duration}" >> $GITHUB_ENV

      - name: Measure SDK build time
        working-directory: sdk
        run: |
          echo "⏱️ Measuring SDK build performance..."
          start_time=$(date +%s%N)
          bun run build
          end_time=$(date +%s%N)
          duration=$(( (end_time - start_time) / 1000000 ))
          echo "📊 SDK build time: ${duration}ms"
          echo "SDK_BUILD_TIME=${duration}" >> $GITHUB_ENV

      - name: Measure CLI build time
        working-directory: cli
        run: |
          echo "⏱️ Measuring CLI build performance..."
          start_time=$(date +%s%N)
          bun run build
          end_time=$(date +%s%N)
          duration=$(( (end_time - start_time) / 1000000 ))
          echo "📊 CLI build time: ${duration}ms"
          echo "CLI_BUILD_TIME=${duration}" >> $GITHUB_ENV

      - name: Analyze build artifacts size
        run: |
          echo "📏 Analyzing build artifact sizes..."
          
          if [ -d "target/deploy" ]; then
            echo "🔧 Solana Program Sizes:"
            du -h target/deploy/*.so 2>/dev/null || echo "No .so files found"
          fi
          
          if [ -d "sdk/dist" ]; then
            echo "📦 SDK Distribution Size:"
            du -sh sdk/dist/
          fi
          
          if [ -d "cli/dist" ]; then
            echo "⚡ CLI Distribution Size:"
            du -sh cli/dist/
          fi

      - name: Generate performance report
        run: |
          echo "📊 Performance Report" > performance_report.md
          echo "===================" >> performance_report.md
          echo "" >> performance_report.md
          echo "| Metric | Time (ms) |" >> performance_report.md
          echo "|--------|-----------|" >> performance_report.md
          echo "| Dependencies Install | ${DEPS_INSTALL_TIME} |" >> performance_report.md
          echo "| Anchor Build | ${ANCHOR_BUILD_TIME} |" >> performance_report.md
          echo "| SDK Build | ${SDK_BUILD_TIME} |" >> performance_report.md
          echo "| CLI Build | ${CLI_BUILD_TIME} |" >> performance_report.md
          echo "" >> performance_report.md
          echo "*Generated on $(date)*" >> performance_report.md
          
          cat performance_report.md

      - name: Upload performance report
        uses: actions/upload-artifact@v4
        with:
          name: performance-report
          path: performance_report.md

  test-performance:
    name: "🧪 Test Performance"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Solana
        uses: ./actions/setup-solana
        with:
          solana-version: ${{ env.SOLANA_VERSION }}
          anchor-version: ${{ env.ANCHOR_VERSION }}

      - name: Install dependencies
        run: |
          bun install
          cd sdk && bun install
          cd ../cli && bun install

      - name: Setup Solana test validator
        run: |
          mkdir -p ~/.config/solana
          solana-keygen new --no-bip39-passphrase -o ~/.config/solana/id.json
          solana config set --url localhost

      - name: Measure test execution time
        run: |
          echo "⏱️ Measuring test performance..."
          
          # Start test validator in background
          solana-test-validator --reset --quiet &
          VALIDATOR_PID=$!
          sleep 10
          
          # Run tests and measure time
          start_time=$(date +%s%N)
          bun run test
          end_time=$(date +%s%N)
          duration=$(( (end_time - start_time) / 1000000 ))
          
          # Cleanup
          kill $VALIDATOR_PID 2>/dev/null || true
          
          echo "📊 Test execution time: ${duration}ms"
          echo "TEST_EXECUTION_TIME=${duration}" >> $GITHUB_ENV

      - name: Measure individual package test times
        run: |
          echo "⏱️ Measuring individual package test performance..."
          
          # SDK tests
          cd sdk
          start_time=$(date +%s%N)
          bun run test || echo "SDK tests completed with warnings"
          end_time=$(date +%s%N)
          sdk_duration=$(( (end_time - start_time) / 1000000 ))
          echo "📊 SDK test time: ${sdk_duration}ms"
          echo "SDK_TEST_TIME=${sdk_duration}" >> $GITHUB_ENV
          
          # CLI tests
          cd ../cli
          start_time=$(date +%s%N)
          bun run test || echo "CLI tests completed with warnings"
          end_time=$(date +%s%N)
          cli_duration=$(( (end_time - start_time) / 1000000 ))
          echo "📊 CLI test time: ${cli_duration}ms"
          echo "CLI_TEST_TIME=${cli_duration}" >> $GITHUB_ENV

  memory-usage:
    name: "💾 Memory Usage Analysis"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install system monitoring tools
        run: |
          sudo apt-get update
          sudo apt-get install -y htop time

      - name: Monitor build memory usage
        run: |
          echo "💾 Monitoring memory usage during build..."
          
          # Monitor memory during dependency installation
          /usr/bin/time -v bun install 2> memory_deps.log || true
          
          # Monitor memory during build
          /usr/bin/time -v bun run build:all 2> memory_build.log || true
          
          echo "📊 Memory usage reports:"
          echo "Dependencies installation:"
          grep -E "(Maximum resident set size|User time|System time)" memory_deps.log || echo "No memory data"
          
          echo "Build process:"
          grep -E "(Maximum resident set size|User time|System time)" memory_build.log || echo "No memory data"

  performance-regression:
    name: "📈 Performance Regression Check"
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Measure current performance
        run: |
          echo "📊 Measuring current PR performance..."
          bun install
          
          start_time=$(date +%s%N)
          bun run build:all
          end_time=$(date +%s%N)
          current_duration=$(( (end_time - start_time) / 1000000 ))
          
          echo "CURRENT_BUILD_TIME=${current_duration}" >> $GITHUB_ENV
          echo "📊 Current build time: ${current_duration}ms"

      - name: Comment performance results
        uses: actions/github-script@v7
        with:
          script: |
            const buildTime = process.env.CURRENT_BUILD_TIME;
            const comment = `## 📊 Performance Report
            
            **Build Performance:**
            - Total build time: ${buildTime}ms
            
            > *Performance data collected on ${new Date().toISOString()}*
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

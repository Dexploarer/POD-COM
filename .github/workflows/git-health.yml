name: Git Health Check

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]

jobs:
  git-health:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for proper analysis

      - name: Check for merge conflicts
        run: |
          echo "Checking for merge conflict markers..."
          if grep -r "<<<<<<< HEAD\|>>>>>>> \|=======" --include="*.ts" --include="*.js" --include="*.rs" --include="*.json" --include="*.yml" --include="*.yaml" --include="*.md" . || true; then
            echo "⚠️  Found potential merge conflict markers in files"
            exit 1
          else
            echo "✅ No merge conflict markers found"
          fi

      - name: Check branch divergence
        run: |
          echo "Checking for branch divergence..."
          git fetch origin
          
          # Get the count of commits ahead and behind
          AHEAD=$(git rev-list --count HEAD ^origin/main 2>/dev/null || echo "0")
          BEHIND=$(git rev-list --count origin/main ^HEAD 2>/dev/null || echo "0")
          
          echo "Local branch is $AHEAD commits ahead and $BEHIND commits behind origin/main"
          
          if [ "$AHEAD" -gt 0 ] && [ "$BEHIND" -gt 0 ]; then
            echo "⚠️  Branch has diverged from origin/main"
            echo "Consider rebasing or merging to resolve divergence"
          else
            echo "✅ Branch is properly synchronized"
          fi

      - name: Validate commit messages
        run: |
          echo "Checking recent commit messages..."
          git log --oneline -5 --pretty=format:"%s" | while read -r msg; do
            if [[ ${#msg} -lt 10 ]]; then
              echo "⚠️  Short commit message found: '$msg'"
            elif [[ ${#msg} -gt 100 ]]; then
              echo "⚠️  Long commit message found: '$msg'"
            else
              echo "✅ Good commit message: '$msg'"
            fi
          done

      - name: Check for large files
        run: |
          echo "Checking for large files..."
          find . -type f -size +10M -not -path "./.git/*" | while read -r file; do
            echo "⚠️  Large file found: $file ($(du -h "$file" | cut -f1))"
          done || echo "✅ No large files found"

      - name: Git configuration check
        run: |
          echo "Recommended Git configuration:"
          echo "git config --global pull.rebase false"
          echo "git config --global init.defaultBranch main"
          echo "git config --global push.default simple"
          echo ""
          echo "Current repository configuration:"
          git config --list --local | grep -E "(pull|push|branch|merge)" || echo "No relevant local configuration found"

name: Build and Analysis

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    types: [opened, synchronize, reopened]

env:
  # Enable debug logging
  ACTIONS_STEP_DEBUG: true
  ACTIONS_RUNNER_DEBUG: true

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-deps-${{ hashFiles('**/package-lock.json', '**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-deps-
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      
      - name: Install dependencies
        run: |
          echo "Installing Node.js dependencies..."
          npm ci
          echo "Node.js dependencies installed successfully"
      
      - name: Build Rust components
        run: |
          echo "Building Rust components..."
          if [ -f "Cargo.toml" ]; then
            cargo build --verbose
            echo "Rust build completed"
          else
            echo "No Cargo.toml found, skipping Rust build"
          fi
      
      - name: Run Rust tests
        run: |
          if [ -f "Cargo.toml" ]; then
            echo "Running Rust tests..."
            cargo test --verbose
            echo "Rust tests completed"
          else
            echo "No Cargo.toml found, skipping Rust tests"
          fi
      
      - name: Run TypeScript/JavaScript tests
        run: |
          echo "Running TypeScript/JavaScript tests..."
          if [ -f "package.json" ]; then
            # Check if test script exists
            if npm run | grep -q "test"; then
              npm test
            else
              echo "No test script found in package.json"
            fi
          else
            echo "No package.json found"
          fi
      
      - name: Build TypeScript/JavaScript
        run: |
          echo "Building TypeScript/JavaScript..."
          if [ -f "package.json" ]; then
            # Check if build script exists
            if npm run | grep -q "build"; then
              npm run build
            else
              echo "No build script found in package.json"
            fi
          else
            echo "No package.json found"
          fi
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: build-artifacts-${{ matrix.node-version }}
          path: |
            dist/
            build/
            target/
            *.log
          retention-days: 7

  sonarqube-analysis:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.actor != 'dependabot[bot]'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests with coverage
        run: |
          if npm run | grep -q "test:coverage"; then
            npm run test:coverage
          elif npm run | grep -q "test"; then
            npm test -- --coverage || npm test
          else
            echo "No test script found, skipping coverage"
          fi
      
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v3
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: SonarSource/sonarqube-quality-gate-action@v1.3.0
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        continue-on-error: true
      
      - name: Upload SonarQube results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sonarqube-results
          path: |
            .scannerwork/
            sonar-project.properties
          retention-days: 7

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run npm audit
        run: |
          if [ -f "package.json" ]; then
            npm audit --audit-level=moderate || echo "npm audit found issues"
          fi
      
      - name: Run Rust security audit
        run: |
          if [ -f "Cargo.toml" ]; then
            cargo install cargo-audit
            cargo audit || echo "cargo audit found issues"
          fi

  troubleshooting:
    name: Troubleshooting Info
    runs-on: ubuntu-latest
    if: failure()
    needs: [build-and-test, sonarqube-analysis]
    
    steps:
      - name: Collect system information
        run: |
          echo "=== System Information ==="
          uname -a
          echo "=== Node.js Version ==="
          node --version || echo "Node.js not available"
          echo "=== NPM Version ==="
          npm --version || echo "NPM not available"
          echo "=== Rust Version ==="
          rustc --version || echo "Rust not available"
          echo "=== Cargo Version ==="
          cargo --version || echo "Cargo not available"
          echo "=== Environment Variables ==="
          env | grep -E '^(NODE|NPM|RUST|CARGO)' || echo "No relevant env vars found"
          echo "=== Disk Space ==="
          df -h
          echo "=== Memory Usage ==="
          free -h
      
      - name: Download artifacts for debugging
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          path: debug-artifacts/
      
      - name: List debug artifacts
        run: |
          echo "=== Debug Artifacts ==="
          find debug-artifacts/ -type f -name "*.log" -exec echo "=== {} ===" \; -exec cat {} \; 2>/dev/null || echo "No log files found"